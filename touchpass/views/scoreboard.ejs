<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Soccer Scoreboard</title>
  <style>
    body {
      font-family: "Courier New", monospace;
      /* Monospaced font */
      background-color: #000000;
      /* Blue background */
      color: #e74c3c;
      /* Red text */
      text-align: center;
      margin: 0;
      padding: 20px;
    }

    .scoreboard {
      background-color: #000000;
      /* Slightly darker blue for the scoreboard */
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 0 10px rgba(255, 255, 255, 0.9);
      margin: auto;
      height: 100vh;
      /* max-width: 600px; */
    }

    .team {
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 10px;
      letter-spacing: 4px;
      /* Add some letter spacing for LED-like appearance */
    }

    .score {
      font-size: 570px;
      margin-bottom: 20px;
      letter-spacing: 6px;
      text-shadow: 0 0 50px rgba(255, 0, 0, 0.7);
      /* Add some letter spacing for LED-like appearance */
    }

    .timer {
      font-size: 160px;
      /* 5 times larger timer */
      margin-bottom: 20px;
      letter-spacing: 10px;
      /* Add some letter spacing for LED-like appearance */
      text-shadow: 0 0 10px rgba(255, 0, 0, 0.7);
      /* Add a red glow effect */
    }

    .separator {
      margin: 0;
      border-top: 2px solid #2c3e50;
    }

    button {
      background-color: #e74c3c;
      /* Red button */
      color: #ecf0f1;
      border: none;
      padding: 10px 20px;
      font-size: 18px;
      cursor: pointer;
      border-radius: 5px;
      margin-top: 10px;
      width: 200px;
      height: 100px;
    }

    .loader {
      border: 16px solid #f3f3f3;
      border-radius: 50%;
      border-top: 16px solid #3498db;
      margin-top: 15px;
      width: 300px;
      height: 300px;
      position: absolute;
      margin-left: auto;
      margin-right: auto;
      left: 0;
      right: 0;
      text-align: center;
      display: none;
      -webkit-animation: spin 2s linear infinite;
      /* Safari */
      animation: spin 2s linear infinite;
      background-color: #000000;
    }

    /* The Modal (background) */
    .modal {
      display: none;
      /* Hidden by default */
      position: fixed;
      /* Stay in place */
      z-index: 1;
      /* Sit on top */
      padding-top: 100px;
      /* Location of the box */
      left: 0;
      top: 0;
      width: 100%;
      /* Full width */
      height: 100%;
      /* Full height */
      overflow: auto;
      /* Enable scroll if needed */
      background-color: rgb(0, 0, 0);
      /* Fallback color */
      background-color: rgba(0, 0, 0, 0.4);
      /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
      background-color: #fefefe;
      margin: auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      height: 40%;
    }

    /* The Close Button */
    .close {
      color: #aaaaaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }

    .close:hover,
    .close:focus {
      color: #000;
      text-decoration: none;
      cursor: pointer;
    }

    label {
      font-family: sans-serif;
      font-size: 1rem;
      padding-right: 10px;
    }

    select {
      font-size: 2.9rem;
      padding: 2px 5px;
    }


    /* Safari */
    @-webkit-keyframes spin {
      0% {
        -webkit-transform: rotate(0deg);
      }

      100% {
        -webkit-transform: rotate(360deg);
      }
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }
  </style>
</head>

<body>
  <div class="scoreboard">
    <div id="qrcode" style="
          width: 300px;
          height: 300px;
          margin-top: 15px;
          position: absolute;
          margin-left: auto;
          margin-right: auto;
          left: 0;
          right: 0;
          text-align: center;
          display: none;
        "></div>
    <div class="loader" id="loader"></div>
    <div class="team" id="percent" style="
          position: absolute;
          margin-left: auto;
          margin-right: auto;
          left: 0;
          right: 0;
          text-align: center;
          margin-top: 150px;
          display: none;
        ">
      UPLOADING: 0%
    </div>
    <!-- The Modal -->
    <div id="myModal" class="modal">

      <!-- Modal content -->
      <div class="modal-content">
        <span class="close">&times;</span>
        <div class="team">ADD NEW USER</div>
        <!-- <label for="pet-select">Choose a pet:</label> -->

        <select name="pets" id="pet-select">
          <option value="">SELECT TEAM</option>
          <option value="Manchester United">Manchester United</option>
          <option value="Real Madrid">Real Madrid</option>
          <option value="FC Barcelona">FC Barcelona</option>
          <option value="Liverpool">Liverpool</option>
          <option value="Bayern Munich">Bayern Munich</option>
          <option value="Manchester City">Manchester City</option>
        </select>
      </div>

    </div>

    <div class="timer" id="timer">01:30</div>

    <div class="team">SCORE</div>
    <div class="score" id="teamAScore">0</div>
    <div class="team" id="userName">USER NAME</div>
    <div class="team" id="lastScore">LAST GAME SCORE: 0</div>
    <div class="team" id="userHighScore">USER HIGH SCORE: 0</div>
    <div class="team" id="highScore">HIGH SCORE: 0</div>

    <!-- <div class="separator"></div> -->


    <!-- <input type="checkbox" id="captureVideo" name="captureVideo" onclick="captueVideoClicked(this);" /> -->
    <!-- <label for="captureVideo">Capture Video</label> -->
    <!-- <button onclick="toggleTimer()">Start/Stop Timer</button> -->
  </div>

  <h1>SSE: <span id="state"></span></h1>
  <h3>Data: <span id="data"></span></h3>
  <button onclick="openFullscreen();">Open Fullscreen</button>
  <button onclick="closeFullscreen();">Close Fullscreen</button>
  <button onclick="resetGame(true)">Reset</button>

  <script src="/socket.io/socket.io.js"></script>
  <script type="text/javascript" src="/js/jquery.min.js"></script>
  <script type="text/javascript" src="/js/qrcode.js"></script>

  <script>
    /* Get the documentElement (<html>) to display the page in fullscreen */
    var elem = document.documentElement;

    /* View in fullscreen */
    function openFullscreen() {
      if (elem.requestFullscreen) {
        elem.requestFullscreen();
      } else if (elem.webkitRequestFullscreen) { /* Safari */
        elem.webkitRequestFullscreen();
      } else if (elem.msRequestFullscreen) { /* IE11 */
        elem.msRequestFullscreen();
      }
    }

    /* Close fullscreen */
    function closeFullscreen() {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.webkitExitFullscreen) { /* Safari */
        document.webkitExitFullscreen();
      } else if (document.msExitFullscreen) { /* IE11 */
        document.msExitFullscreen();
      }
    }
  </script>

  <script>
    var modal = document.getElementById("myModal");

    // Get the button that opens the modal
    // var btn = document.getElementById("myBtn");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks the button, open the modal 
    // btn.onclick = function () {
    //   modal.style.display = "block";
    // }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
      modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    }
  </script>

  <script>
    let teamAScore = 0;
    let timerSeconds = 90; // 3 minutes initially
    let timerInterval;
    var lastScore = 0;
    var highScore = 0;
    const socket = io();
    //text: "https://www.dropbox.com/scl/fi/rf1tk2b4trj5ut93fruy7/touchpass_1726079736203.mp4?rlkey=aq3jwxfus6crdegqi3v4777z3&dl=0",
    var qrcode = new QRCode(document.getElementById("qrcode"), {
      text: "https://www.dropbox.com/scl/fi/rf1tk2b4trj5ut93fruy7/touchpass_1726079736203.mp4?rlkey=aq3jwxfus6crdegqi3v4777z3&dl=0",
      width: 300,
      height: 300,
      colorDark: "#ffffff",
      colorLight: "#000000",
    });

    function makeCode(url) {
      document.getElementById("qrcode").style.display = "block";
      qrcode.makeCode(url);
    }

    //makeCode();

    // connection
    function socketConnect() {
      document.getElementById("state").innerHTML = "Socket Connected";
      console.log("Before Setting Listener");
      socket.on("data", (value) => {
        var recJson = JSON.parse(value);
        document.getElementById("data").innerHTML = JSON.stringify(value);
        console.log(recJson);
        console.log(recJson.reactTime);
        if (!timerInterval) {
          toggleTimer();
        }
        updateScore(recJson.score);
      });
      socket.on("timerTick", (value) => {
        console.log("TimerSeconds: " + value);
        timerSeconds = value;
        updateTimer();
      });
      socket.on("gameReset", (value, time) => {
        console.log("Resetting Game");
        timerSeconds = time;
        resetGame(false);
      });
      socket.on("new-user", (value) => {
        modal.style.display = "block";
      })
      socket.on("shareURL", (value) => {
        console.log("share URL", value);
        document.getElementById("loader").style.display = "none";
        document.getElementById("percent").style.display = "none";
        makeCode(value);
        //resetGame(false);
      });
      socket.on("userData", (value) => {
        console.log("user data", value);
        document.getElementById("userName").innerText = "USER: " + value.UserName;
        //makeCode(value);
        //resetGame(false);
      });
      socket.on("userScoreData", (value) => {
        console.log("user score data", value);
        if (value.length > 0) {
          var date = new Date(0); // The 0 there is the key, which sets the date to the epoch
          date.setMilliseconds(value[0].Timestamp);
          //const date = new Date(value[0].Timestamp);
          const month = date.getMonth() + 1; // months from 1-12
          const day = date.getDate();
          const year = date.getFullYear();
          const newDate = month + "/" + day + "/" + year;

          document.getElementById("userHighScore").innerText = "USER HIGH SCORE: " + value[0].Score + " - " + newDate;
        } else {
          document.getElementById("userHighScore").innerText = "USER HIGH SCORE: 0";
        }

        //makeCode(value);
        //resetGame(false);
      });
      socket.on("scoreData", (value) => {
        console.log("score data", value);
        var date = new Date(0); // The 0 there is the key, which sets the date to the epoch
        date.setMilliseconds(value[0].Timestamp);
        //const date = new Date(value[0].Timestamp);
        const month = date.getMonth() + 1; // months from 1-12
        const day = date.getDate();
        const year = date.getFullYear();
        const newDate = month + "/" + day + "/" + year;

        document.getElementById("highScore").innerText = "HIGH SCORE: " + value[0].Score + " - " + newDate;
        //makeCode(value);
        //resetGame(false);
      });
      socket.on("videoStatus", (value) => {
        console.log("Video Status", value);
        if (value == "video uploading") {
          document.getElementById("loader").style.display = "block";
          document.getElementById("percent").style.display = "block";
        } else {
          document.getElementById("percent").innerText =
            "UPLOADING: " + value + "%";
        }
        //makeCode(value);
        //resetGame(false);
      });
    }
    socket.on("connect", () => {
      socketConnect();
    });

    // socket.on("connect_error", () => {
    //   document.getElementById("state").innerHTML = "Connection Error";
    //   setTimeout(() => {
    //     socket.connect();
    //   }, 1000);
    // });
    socket.on("disconnect", function () {
      document.getElementById("state").innerHTML = "Socket Disconnected";
      socket.off("data");
      //socketCleanup(); // this is a function to cleanup all listeners, just in case, so you can restart fresh
      // socket.on("connect", function () {
      //   console.log("Calling socketConnect")
      //   socketConnect();
      // });
    });

    function updateScore(score) {
      teamAScore = score;
      document.getElementById("teamAScore").innerText = teamAScore;
    }
    function captueVideoClicked(cb) {
      //cb.checked
      socket.emit("capture-video", cb.checked);
    }

    function resetGame(sendSocket) {
      if (!sendSocket) {
        console.log("calling reset");
        //toggleTimer();
        lastScore = teamAScore;
        console.log("last score", lastScore)
        document.getElementById("lastScore").innerText = "Last SCORE: " + lastScore;
        // if (highScore < lastScore) {
        //   highScore = lastScore;
        //   document.getElementById("highScore").innerText =
        //     "High SCORE: " + highScore;
        // }
        teamAScore = 0;
        document.getElementById("teamAScore").innerText = teamAScore;
        //timerSeconds = 90;
        const minutes = Math.floor(timerSeconds / 60)
          .toString()
          .padStart(2, "0");
        const seconds = (timerSeconds % 60).toString().padStart(2, "0");
        document.getElementById("timer").innerText = `${minutes}:${seconds}`;
        document.getElementById("qrcode").style.display = "none";
        document.getElementById("loader").style.display = "none";
      }
      if (sendSocket) {
        socket.emit("game-reset");
      }
    }

    function updateTimer() {
      const minutes = Math.floor(timerSeconds / 60)
        .toString()
        .padStart(2, "0");
      const seconds = (timerSeconds % 60).toString().padStart(2, "0");
      document.getElementById("timer").innerText = `${minutes}:${seconds}`;
      if (timerSeconds === 0) {
        console.log("play audio");
        var audio = new Audio("/audio/whistle.mp3");
        audio.play();
      }

      // if (timerSeconds === 0) {
      //   // fetch("/scoreboard/reset", {
      //   //   method: "GET", // default, so we can ignore
      //   // });
      //   clearInterval(timerInterval);
      // } else {
      //   timerSeconds--;
      // }
    }
    // var context = new AudioContext();
    // var oscillator = context.createOscillator();
    // oscillator.type = "sine";
    // oscillator.frequency.value = 800;
    // oscillator.connect(context.destination);
    // oscillator.start();
    // // Beep for 500 milliseconds
    // setTimeout(function () {
    //     oscillator.stop();
    // }, 100);
    function toggleTimer() {
      // if (timerInterval) {
      //   clearInterval(timerInterval);
      //   timerInterval = null;
      // } else {
      //   timerSeconds = 89;
      //   timerInterval = setInterval(updateTimer, 1000);
      // }
    }
    // if (!!window.EventSource) {
    //   let source = null;
    //   let reconnectTimer = null;

    //   function connect() {
    //     source = new EventSource("/scoreboard/subscribe");
    //     console.log("connecting...");
    //     source.onerror = function () {
    //       source.close();
    //     };
    //   }
    //   connect();

    //   source.addEventListener(
    //     "message",
    //     function (e) {
    //       document.getElementById("data").innerHTML = JSON.stringify(e.data);
    //       var recJson = JSON.parse(e.data);
    //       console.log(recJson);
    //       console.log(recJson.reactTime);
    //       if (!timerInterval) {
    //         toggleTimer();
    //       }
    //       updateScore(recJson.score);
    //     },
    //     false
    //   );

    //   source.addEventListener(
    //     "open",
    //     function (e) {
    //       document.getElementById("state").innerHTML = "Connected";
    //     },
    //     false
    //   );

    //   source.addEventListener(
    //     "error",
    //     function (e) {
    //       const id_state = document.getElementById("state");
    //       if (e.eventPhase == EventSource.CLOSED) source.close();
    //       if (e.target.readyState == EventSource.CLOSED) {
    //         id_state.innerHTML = "Disconnected";
    //         //reconnectTimer = setInterval(connect, 3000);
    //       } else if (e.target.readyState == EventSource.CONNECTING) {
    //         id_state.innerHTML = "Connecting...";
    //         //clearInterval(reconnectTimer);
    //       }
    //     },
    //     false
    //   );
    // } else {
    //   console.log("Your browser doesn't support SSE");
    // }
  </script>
</body>

</html>