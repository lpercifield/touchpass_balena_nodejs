<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Soccer Scoreboard</title>
    <style>
      body {
        font-family: "Courier New", monospace;
        /* Monospaced font */
        background-color: #000000;
        /* Blue background */
        color: #e74c3c;
        /* Red text */
        text-align: center;
        margin: 0;
        padding: 20px;
      }

      .scoreboard {
        background-color: #000000;
        /* Slightly darker blue for the scoreboard */
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.9);
        margin: auto;
        max-width: 600px;
      }

      .team {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
        letter-spacing: 4px;
        /* Add some letter spacing for LED-like appearance */
      }

      .score {
        font-size: 500px;
        margin-bottom: 20px;
        letter-spacing: 6px;
        text-shadow: 0 0 50px rgba(255, 0, 0, 0.7);
        /* Add some letter spacing for LED-like appearance */
      }

      .timer {
        font-size: 160px;
        /* 5 times larger timer */
        margin-bottom: 20px;
        letter-spacing: 10px;
        /* Add some letter spacing for LED-like appearance */
        text-shadow: 0 0 10px rgba(255, 0, 0, 0.7);
        /* Add a red glow effect */
      }

      .separator {
        margin: 0;
        border-top: 2px solid #2c3e50;
      }

      button {
        background-color: #e74c3c;
        /* Red button */
        color: #ecf0f1;
        border: none;
        padding: 10px 20px;
        font-size: 18px;
        cursor: pointer;
        border-radius: 5px;
        margin-top: 10px;
        width: 200px;
        height: 100px;
      }
    </style>
  </head>

  <body>
    <div class="scoreboard">
      <div
        id="qrcode"
        style="
          width: 600px;
          height: 600px;
          margin-top: 15px;
          position: absolute;
          top: 0;
          left: 0;
          display: none;
        "
      ></div>
      <div class="timer" id="timer">01:30</div>

      <div class="team">SCORE</div>
      <div class="score" id="teamAScore">0</div>
      <div class="team" id="lastScore">LAST SCORE: 0</div>
      <div class="team" id="highScore">HIGH SCORE: 0</div>

      <div class="separator"></div>

      <button onclick="resetGame(true)">Reset</button>
      <input
        type="checkbox"
        id="captureVideo"
        name="captureVideo"
        onclick="captueVideoClicked(this);"
      />
      <label for="captureVideo">Capture Video</label>
      <!-- <button onclick="toggleTimer()">Start/Stop Timer</button> -->
    </div>

    <h1>SSE: <span id="state"></span></h1>
    <h3>Data: <span id="data"></span></h3>

    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript" src="/js/jquery.min.js"></script>
    <script type="text/javascript" src="/js/qrcode.js"></script>

    <script>
      let teamAScore = 0;
      let timerSeconds = 90; // 3 minutes initially
      let timerInterval;
      var lastScore = 0;
      var highScore = 0;
      const socket = io();
      var qrcode = new QRCode(document.getElementById("qrcode"), {
        text: "https://www.dropbox.com/scl/fi/rf1tk2b4trj5ut93fruy7/touchpass_1726079736203.mp4?rlkey=aq3jwxfus6crdegqi3v4777z3&dl=0",
        width: 600,
        height: 600,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.H,
      });

      function makeCode(url) {
        document.getElementById("qrcode").style.display = "block";
        qrcode.makeCode(url);
      }

      //makeCode();

      // connection
      function socketConnect() {
        document.getElementById("state").innerHTML = "Socket Connected";
        console.log("Before Setting Listener");
        socket.on("data", (value) => {
          var recJson = JSON.parse(value);
          document.getElementById("data").innerHTML = JSON.stringify(value);
          console.log(recJson);
          console.log(recJson.reactTime);
          if (!timerInterval) {
            toggleTimer();
          }
          updateScore(recJson.score);
        });
        socket.on("timerTick", (value) => {
          console.log("TimerSeconds: " + value);
          timerSeconds = value;
          updateTimer();
        });
        socket.on("gameReset", (value) => {
          console.log("Resetting Game");
          resetGame(false);
        });
        socket.on("shareURL", (value) => {
          console.log("share URL", value);
          makeCode(value);
          //resetGame(false);
        });
      }
      socket.on("connect", () => {
        socketConnect();
      });

      // socket.on("connect_error", () => {
      //   document.getElementById("state").innerHTML = "Connection Error";
      //   setTimeout(() => {
      //     socket.connect();
      //   }, 1000);
      // });
      socket.on("disconnect", function () {
        document.getElementById("state").innerHTML = "Socket Disconnected";
        socket.off("data");
        //socketCleanup(); // this is a function to cleanup all listeners, just in case, so you can restart fresh
        // socket.on("connect", function () {
        //   console.log("Calling socketConnect")
        //   socketConnect();
        // });
      });

      function updateScore(score) {
        teamAScore = score;
        document.getElementById("teamAScore").innerText = teamAScore;
      }
      function captueVideoClicked(cb) {
        //cb.checked
        socket.emit("capture-video", cb.checked);
      }

      function resetGame(sendSocket) {
        if (!sendSocket) {
          console.log("calling reset");
          //toggleTimer();
          lastScore = teamAScore;
          document.getElementById("lastScore").innerText =
            "Last SCORE: " + lastScore;
          if (highScore < lastScore) {
            highScore = lastScore;
            document.getElementById("highScore").innerText =
              "High SCORE: " + highScore;
          }
          teamAScore = 0;
          document.getElementById("teamAScore").innerText = teamAScore;
          timerSeconds = 90;
          const minutes = Math.floor(timerSeconds / 60)
            .toString()
            .padStart(2, "0");
          const seconds = (timerSeconds % 60).toString().padStart(2, "0");
          document.getElementById("timer").innerText = `${minutes}:${seconds}`;
          document.getElementById("qrcode").style.display = "none";
        }
        if (sendSocket) {
          socket.emit("game-reset");
        }
      }

      function updateTimer() {
        const minutes = Math.floor(timerSeconds / 60)
          .toString()
          .padStart(2, "0");
        const seconds = (timerSeconds % 60).toString().padStart(2, "0");
        document.getElementById("timer").innerText = `${minutes}:${seconds}`;

        // if (timerSeconds === 0) {
        //   // fetch("/scoreboard/reset", {
        //   //   method: "GET", // default, so we can ignore
        //   // });
        //   clearInterval(timerInterval);
        // } else {
        //   timerSeconds--;
        // }
      }

      function toggleTimer() {
        // if (timerInterval) {
        //   clearInterval(timerInterval);
        //   timerInterval = null;
        // } else {
        //   timerSeconds = 89;
        //   timerInterval = setInterval(updateTimer, 1000);
        // }
      }
      // if (!!window.EventSource) {
      //   let source = null;
      //   let reconnectTimer = null;

      //   function connect() {
      //     source = new EventSource("/scoreboard/subscribe");
      //     console.log("connecting...");
      //     source.onerror = function () {
      //       source.close();
      //     };
      //   }
      //   connect();

      //   source.addEventListener(
      //     "message",
      //     function (e) {
      //       document.getElementById("data").innerHTML = JSON.stringify(e.data);
      //       var recJson = JSON.parse(e.data);
      //       console.log(recJson);
      //       console.log(recJson.reactTime);
      //       if (!timerInterval) {
      //         toggleTimer();
      //       }
      //       updateScore(recJson.score);
      //     },
      //     false
      //   );

      //   source.addEventListener(
      //     "open",
      //     function (e) {
      //       document.getElementById("state").innerHTML = "Connected";
      //     },
      //     false
      //   );

      //   source.addEventListener(
      //     "error",
      //     function (e) {
      //       const id_state = document.getElementById("state");
      //       if (e.eventPhase == EventSource.CLOSED) source.close();
      //       if (e.target.readyState == EventSource.CLOSED) {
      //         id_state.innerHTML = "Disconnected";
      //         //reconnectTimer = setInterval(connect, 3000);
      //       } else if (e.target.readyState == EventSource.CONNECTING) {
      //         id_state.innerHTML = "Connecting...";
      //         //clearInterval(reconnectTimer);
      //       }
      //     },
      //     false
      //   );
      // } else {
      //   console.log("Your browser doesn't support SSE");
      // }
    </script>
  </body>
</html>
